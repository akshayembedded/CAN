

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Dec 20 22:10:18 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14   000000                     
    15                           ; Generated 23/03/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC18F4580 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49   000000                     _RCREG	set	4014
    50   000000                     _SPBRG	set	4015
    51   000000                     _RCIF	set	31989
    52   000000                     _MDSEL0	set	31678
    53   000000                     _TXB0CON	set	3904
    54   000000                     _TXB0SIDH	set	3905
    55   000000                     _TXIF	set	31988
    56   000000                     _RCSTA	set	4011
    57   000000                     _TXSTA	set	4012
    58   000000                     _TXREG	set	4013
    59   000000                     _TXB0DLC	set	3909
    60   000000                     _TXB0SIDL	set	3906
    61   000000                     _CANSTATbits	set	3950
    62   000000                     _CANCONbits	set	3951
    63   000000                     _TRISB	set	3987
    64   000000                     _TXB0D0	set	3910
    65   000000                     _LATB3	set	31827
    66   000000                     _TRISC	set	3988
    67   000000                     _BRGCON3	set	3954
    68   000000                     _BRGCON2	set	3953
    69   000000                     _BRGCON1	set	3952
    70   000000                     _ENDRHI	set	31645
    71   000000                     _MDSEL1	set	31679
    72                           
    73                           ; #config settings
    74                           
    75                           	psect	cinit
    76   007DC6                     __pcinit:
    77                           	callstack 0
    78   007DC6                     start_initialization:
    79                           	callstack 0
    80   007DC6                     __initialization:
    81                           	callstack 0
    82   007DC6                     end_of_initialization:
    83                           	callstack 0
    84   007DC6                     __end_of__initialization:
    85                           	callstack 0
    86   007DC6  0100               	movlb	0
    87   007DC8  EF3F  F03F         	goto	_main	;jump to C main() function
    88                           
    89                           	psect	cstackCOMRAM
    90   000001                     __pcstackCOMRAM:
    91                           	callstack 0
    92   000001                     txd@a:
    93                           	callstack 0
    94   000001                     delay@a:
    95                           	callstack 0
    96                           
    97                           ; 2 bytes @ 0x0
    98   000001                     	ds	1
    99   000002                     cantx@a:
   100                           	callstack 0
   101                           
   102                           ; 1 bytes @ 0x1
   103   000002                     	ds	1
   104   000003                     ??_delay:
   105                           
   106                           ; 1 bytes @ 0x2
   107   000003                     	ds	1
   108   000004                     delay@i:
   109                           	callstack 0
   110                           
   111                           ; 2 bytes @ 0x3
   112   000004                     	ds	2
   113   000006                     delay@j:
   114                           	callstack 0
   115                           
   116                           ; 2 bytes @ 0x5
   117   000006                     	ds	2
   118   000008                     
   119                           ; 1 bytes @ 0x7
   120 ;;
   121 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   122 ;;
   123 ;; *************** function _main *****************
   124 ;; Defined at:
   125 ;;		line 31 in file "canrx.c"
   126 ;; Parameters:    Size  Location     Type
   127 ;;		None
   128 ;; Auto vars:     Size  Location     Type
   129 ;;  a               1    0        unsigned char 
   130 ;; Return value:  Size  Location     Type
   131 ;;                  1    wreg      void 
   132 ;; Registers used:
   133 ;;		wreg, status,2, status,0, cstack
   134 ;; Tracked objects:
   135 ;;		On entry : 0/0
   136 ;;		On exit  : 0/0
   137 ;;		Unchanged: 0/0
   138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   139 ;;      Params:         0       0       0       0       0       0       0
   140 ;;      Locals:         0       0       0       0       0       0       0
   141 ;;      Temps:          0       0       0       0       0       0       0
   142 ;;      Totals:         0       0       0       0       0       0       0
   143 ;;Total ram usage:        0 bytes
   144 ;; Hardware stack levels required when called: 2
   145 ;; This function calls:
   146 ;;		_cantx
   147 ;;		_delay
   148 ;;		_txd
   149 ;; This function is called by:
   150 ;;		Startup code after reset
   151 ;; This function uses a non-reentrant model
   152 ;;
   153                           
   154                           	psect	text0
   155   007E7E                     __ptext0:
   156                           	callstack 0
   157   007E7E                     _main:
   158                           	callstack 29
   159   007E7E                     
   160                           ;canrx.c: 34: TXSTA=0x24;
   161   007E7E  0E24               	movlw	36
   162   007E80  6EAC               	movwf	172,c	;volatile
   163                           
   164                           ;canrx.c: 35: RCSTA=0x90;
   165   007E82  0E90               	movlw	144
   166   007E84  6EAB               	movwf	171,c	;volatile
   167                           
   168                           ;canrx.c: 36: SPBRG=129;
   169   007E86  0E81               	movlw	129
   170   007E88  6EAF               	movwf	175,c	;volatile
   171                           
   172                           ;canrx.c: 37: TRISB=0x08;
   173   007E8A  0E08               	movlw	8
   174   007E8C  6E93               	movwf	147,c	;volatile
   175                           
   176                           ;canrx.c: 38: TRISC=0x80;
   177   007E8E  0E80               	movlw	128
   178   007E90  6E94               	movwf	148,c	;volatile
   179   007E92                     
   180                           ;canrx.c: 39: LATB3=0;
   181   007E92  968A               	bcf	3978,3,c	;volatile
   182   007E94                     
   183                           ;canrx.c: 40: CANCONbits.REQOP2=1;
   184   007E94  8E6F               	bsf	111,7,c	;volatile
   185   007E96                     l71:
   186   007E96  AE6E               	btfss	110,7,c	;volatile
   187   007E98  EF50  F03F         	goto	u101
   188   007E9C  EF52  F03F         	goto	u100
   189   007EA0                     u101:
   190   007EA0  EF4B  F03F         	goto	l71
   191   007EA4                     u100:
   192   007EA4                     
   193                           ;canrx.c: 42: CANCONbits.ABAT=1;
   194   007EA4  886F               	bsf	111,4,c	;volatile
   195                           
   196                           ;canrx.c: 43: MDSEL1=0;
   197   007EA6  9E77               	bcf	3959,7,c	;volatile
   198                           
   199                           ;canrx.c: 44: MDSEL0=0;
   200   007EA8  9C77               	bcf	3959,6,c	;volatile
   201   007EAA                     
   202                           ;canrx.c: 46: BRGCON1=0x04;
   203   007EAA  0E04               	movlw	4
   204   007EAC  6E70               	movwf	112,c	;volatile
   205                           
   206                           ;canrx.c: 47: BRGCON2=0xa4;
   207   007EAE  0EA4               	movlw	164
   208   007EB0  6E71               	movwf	113,c	;volatile
   209                           
   210                           ;canrx.c: 48: BRGCON3=0x04;
   211   007EB2  0E04               	movlw	4
   212   007EB4  6E72               	movwf	114,c	;volatile
   213   007EB6                     
   214                           ;canrx.c: 50: LATB3=0;
   215   007EB6  968A               	bcf	3978,3,c	;volatile
   216   007EB8                     
   217                           ;canrx.c: 52: ENDRHI=1;
   218   007EB8  8A73               	bsf	3955,5,c	;volatile
   219   007EBA                     
   220                           ;canrx.c: 53: CANCONbits.REQOP2=0;
   221   007EBA  9E6F               	bcf	111,7,c	;volatile
   222   007EBC                     l74:
   223   007EBC  BE6E               	btfsc	110,7,c	;volatile
   224   007EBE  EF63  F03F         	goto	u111
   225   007EC2  EF65  F03F         	goto	u110
   226   007EC6                     u111:
   227   007EC6  EF5E  F03F         	goto	l74
   228   007ECA                     u110:
   229   007ECA                     l78:
   230   007ECA  AA9E               	btfss	3998,5,c	;volatile
   231   007ECC  EF6A  F03F         	goto	u121
   232   007ED0  EF6C  F03F         	goto	u120
   233   007ED4                     u121:
   234   007ED4  EF65  F03F         	goto	l78
   235   007ED8                     u120:
   236   007ED8                     
   237                           ;canrx.c: 61:         txd('I');
   238   007ED8  0E49               	movlw	73
   239   007EDA  ECE6  F03E         	call	_txd
   240                           
   241                           ;canrx.c: 62:         txd(' ');
   242   007EDE  0E20               	movlw	32
   243   007EE0  ECE6  F03E         	call	_txd
   244   007EE4                     
   245                           ;canrx.c: 63:         cantx(RCREG);
   246   007EE4  50AE               	movf	174,w,c	;volatile
   247   007EE6  ECF2  F03E         	call	_cantx
   248   007EEA                     
   249                           ;canrx.c: 65:         delay(100);
   250   007EEA  0E00               	movlw	0
   251   007EEC  6E02               	movwf	(delay@a+1)^0,c
   252   007EEE  0E64               	movlw	100
   253   007EF0  6E01               	movwf	delay@a^0,c
   254   007EF2  EC13  F03F         	call	_delay	;wreg free
   255   007EF6                     
   256                           ;canrx.c: 66:         RCIF=0;
   257   007EF6  9A9E               	bcf	3998,5,c	;volatile
   258   007EF8  EF65  F03F         	goto	l78
   259   007EFC  EF00  F000         	goto	start
   260   007F00                     __end_of_main:
   261                           	callstack 0
   262                           
   263 ;; *************** function _delay *****************
   264 ;; Defined at:
   265 ;;		line 3 in file "canrx.c"
   266 ;; Parameters:    Size  Location     Type
   267 ;;  a               2    0[COMRAM] int 
   268 ;; Auto vars:     Size  Location     Type
   269 ;;  j               2    5[COMRAM] int 
   270 ;;  i               2    3[COMRAM] int 
   271 ;; Return value:  Size  Location     Type
   272 ;;                  1    wreg      void 
   273 ;; Registers used:
   274 ;;		wreg, status,2, status,0
   275 ;; Tracked objects:
   276 ;;		On entry : 0/0
   277 ;;		On exit  : 0/0
   278 ;;		Unchanged: 0/0
   279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   280 ;;      Params:         2       0       0       0       0       0       0
   281 ;;      Locals:         4       0       0       0       0       0       0
   282 ;;      Temps:          1       0       0       0       0       0       0
   283 ;;      Totals:         7       0       0       0       0       0       0
   284 ;;Total ram usage:        7 bytes
   285 ;; Hardware stack levels used: 1
   286 ;; This function calls:
   287 ;;		Nothing
   288 ;; This function is called by:
   289 ;;		_main
   290 ;; This function uses a non-reentrant model
   291 ;;
   292                           
   293                           	psect	text1
   294   007E26                     __ptext1:
   295                           	callstack 0
   296   007E26                     _delay:
   297                           	callstack 30
   298   007E26                     
   299                           ;canrx.c: 3: void delay(int a);canrx.c: 4: {;canrx.c: 5: int i,j;;canrx.c: 6: for(i=0;i<
      +                          a;i++)
   300   007E26  0E00               	movlw	0
   301   007E28  6E05               	movwf	(delay@i+1)^0,c
   302   007E2A  0E00               	movlw	0
   303   007E2C  6E04               	movwf	delay@i^0,c
   304   007E2E  EF2F  F03F         	goto	l829
   305   007E32                     l817:
   306                           
   307                           ;canrx.c: 7: {for(j=0;j<500;j++);}
   308   007E32  0E00               	movlw	0
   309   007E34  6E07               	movwf	(delay@j+1)^0,c
   310   007E36  0E00               	movlw	0
   311   007E38  6E06               	movwf	delay@j^0,c
   312   007E3A                     l823:
   313   007E3A  4A06               	infsnz	delay@j^0,f,c
   314   007E3C  2A07               	incf	(delay@j+1)^0,f,c
   315   007E3E  BE07               	btfsc	(delay@j+1)^0,7,c
   316   007E40  EF2B  F03F         	goto	u81
   317   007E44  0EF4               	movlw	244
   318   007E46  5C06               	subwf	delay@j^0,w,c
   319   007E48  0E01               	movlw	1
   320   007E4A  5807               	subwfb	(delay@j+1)^0,w,c
   321   007E4C  A0D8               	btfss	status,0,c
   322   007E4E  EF2B  F03F         	goto	u81
   323   007E52  EF2D  F03F         	goto	u80
   324   007E56                     u81:
   325   007E56  EF1D  F03F         	goto	l823
   326   007E5A                     u80:
   327   007E5A  4A04               	infsnz	delay@i^0,f,c
   328   007E5C  2A05               	incf	(delay@i+1)^0,f,c
   329   007E5E                     l829:
   330   007E5E  5001               	movf	delay@a^0,w,c
   331   007E60  5C04               	subwf	delay@i^0,w,c
   332   007E62  5005               	movf	(delay@i+1)^0,w,c
   333   007E64  0A80               	xorlw	128
   334   007E66  6E03               	movwf	??_delay^0,c
   335   007E68  5002               	movf	(delay@a+1)^0,w,c
   336   007E6A  0A80               	xorlw	128
   337   007E6C  5803               	subwfb	??_delay^0,w,c
   338   007E6E  A0D8               	btfss	status,0,c
   339   007E70  EF3C  F03F         	goto	u91
   340   007E74  EF3E  F03F         	goto	u90
   341   007E78                     u91:
   342   007E78  EF19  F03F         	goto	l817
   343   007E7C                     u90:
   344   007E7C  0012               	return		;funcret
   345   007E7E                     __end_of_delay:
   346                           	callstack 0
   347                           
   348 ;; *************** function _cantx *****************
   349 ;; Defined at:
   350 ;;		line 16 in file "canrx.c"
   351 ;; Parameters:    Size  Location     Type
   352 ;;  a               1    wreg     unsigned char 
   353 ;; Auto vars:     Size  Location     Type
   354 ;;  a               1    1[COMRAM] unsigned char 
   355 ;; Return value:  Size  Location     Type
   356 ;;                  1    wreg      void 
   357 ;; Registers used:
   358 ;;		wreg, status,2, cstack
   359 ;; Tracked objects:
   360 ;;		On entry : 0/0
   361 ;;		On exit  : 0/0
   362 ;;		Unchanged: 0/0
   363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   364 ;;      Params:         0       0       0       0       0       0       0
   365 ;;      Locals:         1       0       0       0       0       0       0
   366 ;;      Temps:          0       0       0       0       0       0       0
   367 ;;      Totals:         1       0       0       0       0       0       0
   368 ;;Total ram usage:        1 bytes
   369 ;; Hardware stack levels used: 1
   370 ;; Hardware stack levels required when called: 1
   371 ;; This function calls:
   372 ;;		_txd
   373 ;; This function is called by:
   374 ;;		_main
   375 ;; This function uses a non-reentrant model
   376 ;;
   377                           
   378                           	psect	text2
   379   007DE4                     __ptext2:
   380                           	callstack 0
   381   007DE4                     _cantx:
   382                           	callstack 29
   383                           
   384                           ;incstack = 0
   385                           ;cantx@a stored from wreg
   386   007DE4  6E02               	movwf	cantx@a^0,c
   387   007DE6                     
   388                           ;canrx.c: 16: void cantx(char a);canrx.c: 17: {;canrx.c: 19: TXB0SIDH=0;
   389   007DE6  0E00               	movlw	0
   390   007DE8  010F               	movlb	15	; () banked
   391   007DEA  6F41               	movwf	65,b	;volatile
   392                           
   393                           ;canrx.c: 20: TXB0SIDL=0xE0;
   394   007DEC  0EE0               	movlw	224
   395   007DEE  6F42               	movwf	66,b	;volatile
   396                           
   397                           ;canrx.c: 21: TXB0DLC=0x02;
   398   007DF0  0E02               	movlw	2
   399   007DF2  6F45               	movwf	69,b	;volatile
   400   007DF4                     
   401                           ; BSR set to: 15
   402                           ;canrx.c: 22: TXB0D0=a;
   403   007DF4  C002  FF46         	movff	cantx@a,3910	;volatile
   404   007DF8                     
   405                           ; BSR set to: 15
   406                           ;canrx.c: 23: TXB0CON=0x08;
   407   007DF8  0E08               	movlw	8
   408   007DFA  6F40               	movwf	64,b	;volatile
   409   007DFC                     
   410                           ; BSR set to: 15
   411                           ;canrx.c: 24: txd('r');
   412   007DFC  0E72               	movlw	114
   413   007DFE  ECE6  F03E         	call	_txd
   414   007E02                     
   415                           ;canrx.c: 25: txd(' ');
   416   007E02  0E20               	movlw	32
   417   007E04  ECE6  F03E         	call	_txd
   418   007E08                     l63:
   419   007E08  010F               	movlb	15	; () banked
   420   007E0A  B740               	btfsc	64,3,b	;volatile
   421   007E0C  EF0A  F03F         	goto	u41
   422   007E10  EF0C  F03F         	goto	u40
   423   007E14                     u41:
   424   007E14  EF04  F03F         	goto	l63
   425   007E18                     u40:
   426   007E18                     
   427                           ; BSR set to: 15
   428                           ;canrx.c: 27: txd('n');
   429   007E18  0E6E               	movlw	110
   430   007E1A  ECE6  F03E         	call	_txd
   431                           
   432                           ;canrx.c: 28: txd(' ');
   433   007E1E  0E20               	movlw	32
   434   007E20  ECE6  F03E         	call	_txd
   435   007E24  0012               	return		;funcret
   436   007E26                     __end_of_cantx:
   437                           	callstack 0
   438                           
   439 ;; *************** function _txd *****************
   440 ;; Defined at:
   441 ;;		line 9 in file "canrx.c"
   442 ;; Parameters:    Size  Location     Type
   443 ;;  a               1    wreg     unsigned char 
   444 ;; Auto vars:     Size  Location     Type
   445 ;;  a               1    0[COMRAM] unsigned char 
   446 ;; Return value:  Size  Location     Type
   447 ;;                  1    wreg      void 
   448 ;; Registers used:
   449 ;;		wreg
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   455 ;;      Params:         0       0       0       0       0       0       0
   456 ;;      Locals:         1       0       0       0       0       0       0
   457 ;;      Temps:          0       0       0       0       0       0       0
   458 ;;      Totals:         1       0       0       0       0       0       0
   459 ;;Total ram usage:        1 bytes
   460 ;; Hardware stack levels used: 1
   461 ;; This function calls:
   462 ;;		Nothing
   463 ;; This function is called by:
   464 ;;		_cantx
   465 ;;		_main
   466 ;; This function uses a non-reentrant model
   467 ;;
   468                           
   469                           	psect	text3
   470   007DCC                     __ptext3:
   471                           	callstack 0
   472   007DCC                     _txd:
   473                           	callstack 30
   474                           
   475                           ;incstack = 0
   476                           ;txd@a stored from wreg
   477   007DCC  6E01               	movwf	txd@a^0,c
   478   007DCE                     l57:
   479   007DCE  A89E               	btfss	3998,4,c	;volatile
   480   007DD0  EFEC  F03E         	goto	u11
   481   007DD4  EFEE  F03E         	goto	u10
   482   007DD8                     u11:
   483   007DD8  EFE7  F03E         	goto	l57
   484   007DDC                     u10:
   485   007DDC                     
   486                           ;canrx.c: 12: TXREG=a;
   487   007DDC  C001  FFAD         	movff	txd@a,4013	;volatile
   488   007DE0                     
   489                           ;canrx.c: 13: TXIF=0;
   490   007DE0  989E               	bcf	3998,4,c	;volatile
   491   007DE2  0012               	return		;funcret
   492   007DE4                     __end_of_txd:
   493                           	callstack 0
   494                           
   495                           	psect	smallconst
   496   001400                     __psmallconst:
   497                           	callstack 0
   498   001400  00                 	db	0
   499   001401  00                 	db	0	; dummy byte at the end
   500   000000                     
   501                           	psect	rparam
   502   000000                     tosu	equ	0xFFF
   503                           tosh	equ	0xFFE
   504                           tosl	equ	0xFFD
   505                           stkptr	equ	0xFFC
   506                           pclatu	equ	0xFFB
   507                           pclath	equ	0xFFA
   508                           pcl	equ	0xFF9
   509                           tblptru	equ	0xFF8
   510                           tblptrh	equ	0xFF7
   511                           tblptrl	equ	0xFF6
   512                           tablat	equ	0xFF5
   513                           prodh	equ	0xFF4
   514                           prodl	equ	0xFF3
   515                           indf0	equ	0xFEF
   516                           postinc0	equ	0xFEE
   517                           postdec0	equ	0xFED
   518                           preinc0	equ	0xFEC
   519                           plusw0	equ	0xFEB
   520                           fsr0h	equ	0xFEA
   521                           fsr0l	equ	0xFE9
   522                           wreg	equ	0xFE8
   523                           indf1	equ	0xFE7
   524                           postinc1	equ	0xFE6
   525                           postdec1	equ	0xFE5
   526                           preinc1	equ	0xFE4
   527                           plusw1	equ	0xFE3
   528                           fsr1h	equ	0xFE2
   529                           fsr1l	equ	0xFE1
   530                           bsr	equ	0xFE0
   531                           indf2	equ	0xFDF
   532                           postinc2	equ	0xFDE
   533                           postdec2	equ	0xFDD
   534                           preinc2	equ	0xFDC
   535                           plusw2	equ	0xFDB
   536                           fsr2h	equ	0xFDA
   537                           fsr2l	equ	0xFD9
   538                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      7       7
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_delay
    _cantx->_txd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     214
                              _cantx
                              _delay
                                _txd
 ---------------------------------------------------------------------------------
 (1) _delay                                                7     5      2     168
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _cantx                                                1     1      0      30
                                              1 COMRAM     1     1      0
                                _txd
 ---------------------------------------------------------------------------------
 (1) _txd                                                  1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cantx
     _txd
   _delay
   _txd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      7       7       1        7.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBIGSFRhhh        50      0       0      16        0.0%
BITBIGSFRhl          C      0       0      17        0.0%
BITBIGSFRlhhh        9      0       0      18        0.0%
BITBIGSFRlhhlh       8      0       0      19        0.0%
BITBIGSFRlhhllh     12      0       0      20        0.0%
BITBIGSFRlhhllh      3      0       0      21        0.0%
BITBIGSFRlhhlll     27      0       0      22        0.0%
BITBIGSFRlhl         2      0       0      23        0.0%
BITBIGSFRll        240      0       0      24        0.0%
ABS                  0      0       0      25        0.0%
BIGRAM             5FF      0       0      26        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Dec 20 22:10:18 2023

                     l60 7DE2                       l54 7E7C                       l63 7E08  
                     l71 7E96                       l57 7DCE                       l73 7EA4  
                     l66 7E24                       l74 7EBC                       l78 7ECA  
                     u10 7DDC                       u11 7DD8                       u40 7E18  
                     u41 7E14                       u80 7E5A                       u81 7E56  
                     u90 7E7C                       u91 7E78                      l823 7E3A  
                    l815 7E26                      l831 7E7E                      l761 7DDC  
                    l825 7E3E                      l817 7E32                      l841 7EB8  
                    l833 7E92                      l763 7DE0                      l827 7E5A  
                    l851 7EF6                      l843 7EBA                      l835 7E94  
                    l781 7DE6                      l829 7E5E                      l845 7ED8  
                    l837 7EAA                      l759 7DCE                      l791 7E18  
                    l783 7DF4                      l847 7EE4                      l839 7EB6  
                    l785 7DF8                      l849 7EEA                      l787 7DFC  
                    l789 7E02                      u100 7EA4                      u101 7EA0  
                    u110 7ECA                      u111 7EC6                      u120 7ED8  
                    u121 7ED4                      _txd 7DCC                     ?_txd 0001  
                   _RCIF 7CF5                     _TXIF 7CF4                     _main 7E7E  
                   txd@a 0001                     start 0000             ___param_bank 0000  
                  ??_txd 0001                    ?_main 0001                    _LATB3 7C53  
                  _RCREG 0FAE                    _RCSTA 0FAB                    _SPBRG 0FAF  
                  _TRISB 0F93                    _TRISC 0F94                    _TXREG 0FAD  
                  _TXSTA 0FAC                    _cantx 7DE4                    _delay 7E26  
                  status 0FD8          __initialization 7DC6             __end_of_main 7F00  
                 ??_main 0008            __activetblptr 0000                   ?_cantx 0001  
                 ?_delay 0001                   _ENDRHI 7B9D                   _MDSEL0 7BBE  
                 _MDSEL1 7BBF                   _TXB0D0 0F46                   cantx@a 0002  
                 delay@a 0001                   delay@i 0004                   delay@j 0006  
                 isa$std 0001             __mediumconst 0000               __accesstop 0060  
__end_of__initialization 7DC6            ___rparam_used 0001           __pcstackCOMRAM 0001  
          __end_of_cantx 7E26            __end_of_delay 7E7E                  ??_cantx 0002  
                ??_delay 0003                  _BRGCON1 0F70                  _BRGCON2 0F71  
                _BRGCON3 0F72                  _TXB0DLC 0F45                  _TXB0CON 0F40  
                __Hparam 0000                  __Lparam 0000             __psmallconst 1400  
                __pcinit 7DC6                  __ramtop 0600                  __ptext0 7E7E  
                __ptext1 7E26                  __ptext2 7DE4                  __ptext3 7DCC  
   end_of_initialization 7DC6      start_initialization 7DC6              __end_of_txd 7DE4  
            _CANSTATbits 0F6E              __smallconst 1400                 _TXB0SIDH 0F41  
               _TXB0SIDL 0F42               _CANCONbits 0F6F                 __Hrparam 0000  
               __Lrparam 0000                 isa$xinst 0000  
