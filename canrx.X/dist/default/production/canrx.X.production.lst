

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Nov 18 20:10:54 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14   000000                     
    15                           ; Generated 23/03/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC18F4580 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49   000000                     _RCREG	set	4014
    50   000000                     _SPBRG	set	4015
    51   000000                     _RCIF	set	31989
    52   000000                     _MDSEL0	set	31678
    53   000000                     _TXB0CON	set	3904
    54   000000                     _TXB0SIDH	set	3905
    55   000000                     _TXIF	set	31988
    56   000000                     _RCSTA	set	4011
    57   000000                     _TXSTA	set	4012
    58   000000                     _TXREG	set	4013
    59   000000                     _TXB0DLC	set	3909
    60   000000                     _TXB0SIDL	set	3906
    61   000000                     _CANSTATbits	set	3950
    62   000000                     _CANCONbits	set	3951
    63   000000                     _TRISB	set	3987
    64   000000                     _TXB0D1	set	3911
    65   000000                     _TXB0D0	set	3910
    66   000000                     _LATB3	set	31827
    67   000000                     _TRISC	set	3988
    68   000000                     _BRGCON3	set	3954
    69   000000                     _BRGCON2	set	3953
    70   000000                     _BRGCON1	set	3952
    71   000000                     _ENDRHI	set	31645
    72   000000                     _MDSEL1	set	31679
    73                           
    74                           ; #config settings
    75                           
    76                           	psect	cinit
    77   007DBC                     __pcinit:
    78                           	callstack 0
    79   007DBC                     start_initialization:
    80                           	callstack 0
    81   007DBC                     __initialization:
    82                           	callstack 0
    83   007DBC                     end_of_initialization:
    84                           	callstack 0
    85   007DBC                     __end_of__initialization:
    86                           	callstack 0
    87   007DBC  0100               	movlb	0
    88   007DBE  EF3C  F03F         	goto	_main	;jump to C main() function
    89                           
    90                           	psect	cstackCOMRAM
    91   000001                     __pcstackCOMRAM:
    92                           	callstack 0
    93   000001                     txd@a:
    94                           	callstack 0
    95   000001                     delay@a:
    96                           	callstack 0
    97                           
    98                           ; 2 bytes @ 0x0
    99   000001                     	ds	1
   100   000002                     cantx@b:
   101                           	callstack 0
   102                           
   103                           ; 1 bytes @ 0x1
   104   000002                     	ds	1
   105   000003                     ??_delay:
   106   000003                     cantx@a:
   107                           	callstack 0
   108                           
   109                           ; 1 bytes @ 0x2
   110   000003                     	ds	1
   111   000004                     delay@i:
   112                           	callstack 0
   113                           
   114                           ; 2 bytes @ 0x3
   115   000004                     	ds	2
   116   000006                     delay@j:
   117                           	callstack 0
   118                           
   119                           ; 2 bytes @ 0x5
   120   000006                     	ds	2
   121   000008                     
   122                           ; 1 bytes @ 0x7
   123 ;;
   124 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   125 ;;
   126 ;; *************** function _main *****************
   127 ;; Defined at:
   128 ;;		line 32 in file "canrx.c"
   129 ;; Parameters:    Size  Location     Type
   130 ;;		None
   131 ;; Auto vars:     Size  Location     Type
   132 ;;  a               1    0        unsigned char 
   133 ;; Return value:  Size  Location     Type
   134 ;;                  1    wreg      void 
   135 ;; Registers used:
   136 ;;		wreg, status,2, status,0, cstack
   137 ;; Tracked objects:
   138 ;;		On entry : 0/0
   139 ;;		On exit  : 0/0
   140 ;;		Unchanged: 0/0
   141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   142 ;;      Params:         0       0       0       0       0       0       0
   143 ;;      Locals:         0       0       0       0       0       0       0
   144 ;;      Temps:          0       0       0       0       0       0       0
   145 ;;      Totals:         0       0       0       0       0       0       0
   146 ;;Total ram usage:        0 bytes
   147 ;; Hardware stack levels required when called: 2
   148 ;; This function calls:
   149 ;;		_cantx
   150 ;;		_delay
   151 ;;		_txd
   152 ;; This function is called by:
   153 ;;		Startup code after reset
   154 ;; This function uses a non-reentrant model
   155 ;;
   156                           
   157                           	psect	text0
   158   007E78                     __ptext0:
   159                           	callstack 0
   160   007E78                     _main:
   161                           	callstack 29
   162   007E78                     
   163                           ;canrx.c: 35: TXSTA=0x24;
   164   007E78  0E24               	movlw	36
   165   007E7A  6EAC               	movwf	172,c	;volatile
   166                           
   167                           ;canrx.c: 36: RCSTA=0x90;
   168   007E7C  0E90               	movlw	144
   169   007E7E  6EAB               	movwf	171,c	;volatile
   170                           
   171                           ;canrx.c: 37: SPBRG=129;
   172   007E80  0E81               	movlw	129
   173   007E82  6EAF               	movwf	175,c	;volatile
   174                           
   175                           ;canrx.c: 38: TRISB=0x08;
   176   007E84  0E08               	movlw	8
   177   007E86  6E93               	movwf	147,c	;volatile
   178                           
   179                           ;canrx.c: 39: TRISC=0x80;
   180   007E88  0E80               	movlw	128
   181   007E8A  6E94               	movwf	148,c	;volatile
   182   007E8C                     
   183                           ;canrx.c: 40: LATB3=0;
   184   007E8C  968A               	bcf	3978,3,c	;volatile
   185   007E8E                     
   186                           ;canrx.c: 41: CANCONbits.REQOP2=1;
   187   007E8E  8E6F               	bsf	111,7,c	;volatile
   188   007E90                     l73:
   189   007E90  AE6E               	btfss	110,7,c	;volatile
   190   007E92  EF4D  F03F         	goto	u111
   191   007E96  EF4F  F03F         	goto	u110
   192   007E9A                     u111:
   193   007E9A  EF48  F03F         	goto	l73
   194   007E9E                     u110:
   195   007E9E                     
   196                           ;canrx.c: 43: CANCONbits.ABAT=1;
   197   007E9E  886F               	bsf	111,4,c	;volatile
   198                           
   199                           ;canrx.c: 44: MDSEL1=0;
   200   007EA0  9E77               	bcf	3959,7,c	;volatile
   201                           
   202                           ;canrx.c: 45: MDSEL0=0;
   203   007EA2  9C77               	bcf	3959,6,c	;volatile
   204   007EA4                     
   205                           ;canrx.c: 47: BRGCON1=0x04;
   206   007EA4  0E04               	movlw	4
   207   007EA6  6E70               	movwf	112,c	;volatile
   208                           
   209                           ;canrx.c: 48: BRGCON2=0xa4;
   210   007EA8  0EA4               	movlw	164
   211   007EAA  6E71               	movwf	113,c	;volatile
   212                           
   213                           ;canrx.c: 49: BRGCON3=0x04;
   214   007EAC  0E04               	movlw	4
   215   007EAE  6E72               	movwf	114,c	;volatile
   216   007EB0                     
   217                           ;canrx.c: 51: LATB3=0;
   218   007EB0  968A               	bcf	3978,3,c	;volatile
   219   007EB2                     
   220                           ;canrx.c: 53: ENDRHI=1;
   221   007EB2  8A73               	bsf	3955,5,c	;volatile
   222   007EB4                     
   223                           ;canrx.c: 54: CANCONbits.REQOP2=0;
   224   007EB4  9E6F               	bcf	111,7,c	;volatile
   225   007EB6                     l76:
   226   007EB6  BE6E               	btfsc	110,7,c	;volatile
   227   007EB8  EF60  F03F         	goto	u121
   228   007EBC  EF62  F03F         	goto	u120
   229   007EC0                     u121:
   230   007EC0  EF5B  F03F         	goto	l76
   231   007EC4                     u120:
   232   007EC4                     l80:
   233   007EC4  AA9E               	btfss	3998,5,c	;volatile
   234   007EC6  EF67  F03F         	goto	u131
   235   007ECA  EF69  F03F         	goto	u130
   236   007ECE                     u131:
   237   007ECE  EF62  F03F         	goto	l80
   238   007ED2                     u130:
   239   007ED2                     
   240                           ;canrx.c: 61:     RCREG;
   241   007ED2  50AE               	movf	174,w,c	;volatile
   242   007ED4                     
   243                           ;canrx.c: 62:         txd('s');
   244   007ED4  0E73               	movlw	115
   245   007ED6  ECE1  F03E         	call	_txd
   246   007EDA                     
   247                           ;canrx.c: 63:         txd(' ');
   248   007EDA  0E20               	movlw	32
   249   007EDC  ECE1  F03E         	call	_txd
   250   007EE0                     
   251                           ;canrx.c: 64:         cantx('a','b');
   252   007EE0  0E62               	movlw	98
   253   007EE2  6E02               	movwf	cantx@b^0,c
   254   007EE4  0E61               	movlw	97
   255   007EE6  ECED  F03E         	call	_cantx
   256   007EEA                     
   257                           ;canrx.c: 66:         delay(100);
   258   007EEA  0E00               	movlw	0
   259   007EEC  6E02               	movwf	(delay@a+1)^0,c
   260   007EEE  0E64               	movlw	100
   261   007EF0  6E01               	movwf	delay@a^0,c
   262   007EF2  EC10  F03F         	call	_delay	;wreg free
   263   007EF6                     
   264                           ;canrx.c: 67:         RCIF=0;
   265   007EF6  9A9E               	bcf	3998,5,c	;volatile
   266   007EF8  EF62  F03F         	goto	l80
   267   007EFC  EF00  F000         	goto	start
   268   007F00                     __end_of_main:
   269                           	callstack 0
   270                           
   271 ;; *************** function _delay *****************
   272 ;; Defined at:
   273 ;;		line 3 in file "canrx.c"
   274 ;; Parameters:    Size  Location     Type
   275 ;;  a               2    0[COMRAM] int 
   276 ;; Auto vars:     Size  Location     Type
   277 ;;  j               2    5[COMRAM] int 
   278 ;;  i               2    3[COMRAM] int 
   279 ;; Return value:  Size  Location     Type
   280 ;;                  1    wreg      void 
   281 ;; Registers used:
   282 ;;		wreg, status,2, status,0
   283 ;; Tracked objects:
   284 ;;		On entry : 0/0
   285 ;;		On exit  : 0/0
   286 ;;		Unchanged: 0/0
   287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   288 ;;      Params:         2       0       0       0       0       0       0
   289 ;;      Locals:         4       0       0       0       0       0       0
   290 ;;      Temps:          1       0       0       0       0       0       0
   291 ;;      Totals:         7       0       0       0       0       0       0
   292 ;;Total ram usage:        7 bytes
   293 ;; Hardware stack levels used: 1
   294 ;; This function calls:
   295 ;;		Nothing
   296 ;; This function is called by:
   297 ;;		_main
   298 ;; This function uses a non-reentrant model
   299 ;;
   300                           
   301                           	psect	text1
   302   007E20                     __ptext1:
   303                           	callstack 0
   304   007E20                     _delay:
   305                           	callstack 30
   306   007E20                     
   307                           ;canrx.c: 3: void delay(int a);canrx.c: 4: {;canrx.c: 5: int i,j;;canrx.c: 6: for(i=0;i<
      +                          a;i++)
   308   007E20  0E00               	movlw	0
   309   007E22  6E05               	movwf	(delay@i+1)^0,c
   310   007E24  0E00               	movlw	0
   311   007E26  6E04               	movwf	delay@i^0,c
   312   007E28  EF2C  F03F         	goto	l837
   313   007E2C                     l825:
   314                           
   315                           ;canrx.c: 7: {for(j=0;j<500;j++);}
   316   007E2C  0E00               	movlw	0
   317   007E2E  6E07               	movwf	(delay@j+1)^0,c
   318   007E30  0E00               	movlw	0
   319   007E32  6E06               	movwf	delay@j^0,c
   320   007E34                     l831:
   321   007E34  4A06               	infsnz	delay@j^0,f,c
   322   007E36  2A07               	incf	(delay@j+1)^0,f,c
   323   007E38  BE07               	btfsc	(delay@j+1)^0,7,c
   324   007E3A  EF28  F03F         	goto	u81
   325   007E3E  0EF4               	movlw	244
   326   007E40  5C06               	subwf	delay@j^0,w,c
   327   007E42  0E01               	movlw	1
   328   007E44  5807               	subwfb	(delay@j+1)^0,w,c
   329   007E46  A0D8               	btfss	status,0,c
   330   007E48  EF28  F03F         	goto	u81
   331   007E4C  EF2A  F03F         	goto	u80
   332   007E50                     u81:
   333   007E50  EF1A  F03F         	goto	l831
   334   007E54                     u80:
   335   007E54  4A04               	infsnz	delay@i^0,f,c
   336   007E56  2A05               	incf	(delay@i+1)^0,f,c
   337   007E58                     l837:
   338   007E58  5001               	movf	delay@a^0,w,c
   339   007E5A  5C04               	subwf	delay@i^0,w,c
   340   007E5C  5005               	movf	(delay@i+1)^0,w,c
   341   007E5E  0A80               	xorlw	128
   342   007E60  6E03               	movwf	??_delay^0,c
   343   007E62  5002               	movf	(delay@a+1)^0,w,c
   344   007E64  0A80               	xorlw	128
   345   007E66  5803               	subwfb	??_delay^0,w,c
   346   007E68  A0D8               	btfss	status,0,c
   347   007E6A  EF39  F03F         	goto	u91
   348   007E6E  EF3B  F03F         	goto	u90
   349   007E72                     u91:
   350   007E72  EF16  F03F         	goto	l825
   351   007E76                     u90:
   352   007E76  0012               	return		;funcret
   353   007E78                     __end_of_delay:
   354                           	callstack 0
   355                           
   356 ;; *************** function _cantx *****************
   357 ;; Defined at:
   358 ;;		line 16 in file "canrx.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;  a               1    wreg     unsigned char 
   361 ;;  b               1    1[COMRAM] unsigned char 
   362 ;; Auto vars:     Size  Location     Type
   363 ;;  a               1    2[COMRAM] unsigned char 
   364 ;; Return value:  Size  Location     Type
   365 ;;                  1    wreg      void 
   366 ;; Registers used:
   367 ;;		wreg, status,2, cstack
   368 ;; Tracked objects:
   369 ;;		On entry : 0/0
   370 ;;		On exit  : 0/0
   371 ;;		Unchanged: 0/0
   372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   373 ;;      Params:         1       0       0       0       0       0       0
   374 ;;      Locals:         1       0       0       0       0       0       0
   375 ;;      Temps:          0       0       0       0       0       0       0
   376 ;;      Totals:         2       0       0       0       0       0       0
   377 ;;Total ram usage:        2 bytes
   378 ;; Hardware stack levels used: 1
   379 ;; Hardware stack levels required when called: 1
   380 ;; This function calls:
   381 ;;		_txd
   382 ;; This function is called by:
   383 ;;		_main
   384 ;; This function uses a non-reentrant model
   385 ;;
   386                           
   387                           	psect	text2
   388   007DDA                     __ptext2:
   389                           	callstack 0
   390   007DDA                     _cantx:
   391                           	callstack 29
   392                           
   393                           ;incstack = 0
   394                           ;cantx@a stored from wreg
   395   007DDA  6E03               	movwf	cantx@a^0,c
   396   007DDC                     
   397                           ;canrx.c: 16: void cantx(char a,char b);canrx.c: 17: {;canrx.c: 19: TXB0SIDH=0;
   398   007DDC  0E00               	movlw	0
   399   007DDE  010F               	movlb	15	; () banked
   400   007DE0  6F41               	movwf	65,b	;volatile
   401                           
   402                           ;canrx.c: 20: TXB0SIDL=0xE0;
   403   007DE2  0EE0               	movlw	224
   404   007DE4  6F42               	movwf	66,b	;volatile
   405                           
   406                           ;canrx.c: 21: TXB0DLC=0x02;
   407   007DE6  0E02               	movlw	2
   408   007DE8  6F45               	movwf	69,b	;volatile
   409   007DEA                     
   410                           ; BSR set to: 15
   411                           ;canrx.c: 22: TXB0D0=a;
   412   007DEA  C003  FF46         	movff	cantx@a,3910	;volatile
   413   007DEE                     
   414                           ; BSR set to: 15
   415                           ;canrx.c: 23: TXB0D1=b;
   416   007DEE  C002  FF47         	movff	cantx@b,3911	;volatile
   417   007DF2                     
   418                           ; BSR set to: 15
   419                           ;canrx.c: 24: TXB0CON=0x08;
   420   007DF2  0E08               	movlw	8
   421   007DF4  6F40               	movwf	64,b	;volatile
   422   007DF6                     
   423                           ; BSR set to: 15
   424                           ;canrx.c: 25: txd('r');
   425   007DF6  0E72               	movlw	114
   426   007DF8  ECE1  F03E         	call	_txd
   427   007DFC                     
   428                           ;canrx.c: 26: txd(' ');
   429   007DFC  0E20               	movlw	32
   430   007DFE  ECE1  F03E         	call	_txd
   431   007E02                     l65:
   432   007E02  010F               	movlb	15	; () banked
   433   007E04  B740               	btfsc	64,3,b	;volatile
   434   007E06  EF07  F03F         	goto	u101
   435   007E0A  EF09  F03F         	goto	u100
   436   007E0E                     u101:
   437   007E0E  EF01  F03F         	goto	l65
   438   007E12                     u100:
   439   007E12                     
   440                           ; BSR set to: 15
   441                           ;canrx.c: 28: txd('n');
   442   007E12  0E6E               	movlw	110
   443   007E14  ECE1  F03E         	call	_txd
   444                           
   445                           ;canrx.c: 29: txd(' ');
   446   007E18  0E20               	movlw	32
   447   007E1A  ECE1  F03E         	call	_txd
   448   007E1E  0012               	return		;funcret
   449   007E20                     __end_of_cantx:
   450                           	callstack 0
   451                           
   452 ;; *************** function _txd *****************
   453 ;; Defined at:
   454 ;;		line 9 in file "canrx.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;  a               1    wreg     unsigned char 
   457 ;; Auto vars:     Size  Location     Type
   458 ;;  a               1    0[COMRAM] unsigned char 
   459 ;; Return value:  Size  Location     Type
   460 ;;                  1    wreg      void 
   461 ;; Registers used:
   462 ;;		wreg
   463 ;; Tracked objects:
   464 ;;		On entry : 0/0
   465 ;;		On exit  : 0/0
   466 ;;		Unchanged: 0/0
   467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   468 ;;      Params:         0       0       0       0       0       0       0
   469 ;;      Locals:         1       0       0       0       0       0       0
   470 ;;      Temps:          0       0       0       0       0       0       0
   471 ;;      Totals:         1       0       0       0       0       0       0
   472 ;;Total ram usage:        1 bytes
   473 ;; Hardware stack levels used: 1
   474 ;; This function calls:
   475 ;;		Nothing
   476 ;; This function is called by:
   477 ;;		_cantx
   478 ;;		_main
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           	psect	text3
   483   007DC2                     __ptext3:
   484                           	callstack 0
   485   007DC2                     _txd:
   486                           	callstack 30
   487                           
   488                           ;incstack = 0
   489                           ;txd@a stored from wreg
   490   007DC2  6E01               	movwf	txd@a^0,c
   491   007DC4                     l59:
   492   007DC4  A89E               	btfss	3998,4,c	;volatile
   493   007DC6  EFE7  F03E         	goto	u11
   494   007DCA  EFE9  F03E         	goto	u10
   495   007DCE                     u11:
   496   007DCE  EFE2  F03E         	goto	l59
   497   007DD2                     u10:
   498   007DD2                     
   499                           ;canrx.c: 12: TXREG=a;
   500   007DD2  C001  FFAD         	movff	txd@a,4013	;volatile
   501   007DD6                     
   502                           ;canrx.c: 13: TXIF=0;
   503   007DD6  989E               	bcf	3998,4,c	;volatile
   504   007DD8  0012               	return		;funcret
   505   007DDA                     __end_of_txd:
   506                           	callstack 0
   507                           
   508                           	psect	smallconst
   509   001400                     __psmallconst:
   510                           	callstack 0
   511   001400  00                 	db	0
   512   001401  00                 	db	0	; dummy byte at the end
   513   000000                     
   514                           	psect	rparam
   515   000000                     tosu	equ	0xFFF
   516                           tosh	equ	0xFFE
   517                           tosl	equ	0xFFD
   518                           stkptr	equ	0xFFC
   519                           pclatu	equ	0xFFB
   520                           pclath	equ	0xFFA
   521                           pcl	equ	0xFF9
   522                           tblptru	equ	0xFF8
   523                           tblptrh	equ	0xFF7
   524                           tblptrl	equ	0xFF6
   525                           tablat	equ	0xFF5
   526                           prodh	equ	0xFF4
   527                           prodl	equ	0xFF3
   528                           indf0	equ	0xFEF
   529                           postinc0	equ	0xFEE
   530                           postdec0	equ	0xFED
   531                           preinc0	equ	0xFEC
   532                           plusw0	equ	0xFEB
   533                           fsr0h	equ	0xFEA
   534                           fsr0l	equ	0xFE9
   535                           wreg	equ	0xFE8
   536                           indf1	equ	0xFE7
   537                           postinc1	equ	0xFE6
   538                           postdec1	equ	0xFE5
   539                           preinc1	equ	0xFE4
   540                           plusw1	equ	0xFE3
   541                           fsr1h	equ	0xFE2
   542                           fsr1l	equ	0xFE1
   543                           bsr	equ	0xFE0
   544                           indf2	equ	0xFDF
   545                           postinc2	equ	0xFDE
   546                           postdec2	equ	0xFDD
   547                           preinc2	equ	0xFDC
   548                           plusw2	equ	0xFDB
   549                           fsr2h	equ	0xFDA
   550                           fsr2l	equ	0xFD9
   551                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      7       7
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_delay
    _cantx->_txd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     319
                              _cantx
                              _delay
                                _txd
 ---------------------------------------------------------------------------------
 (1) _delay                                                7     5      2     168
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _cantx                                                2     1      1     135
                                              1 COMRAM     2     1      1
                                _txd
 ---------------------------------------------------------------------------------
 (1) _txd                                                  1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cantx
     _txd
   _delay
   _txd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      7       7       1        7.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBIGSFRhhh        50      0       0      16        0.0%
BITBIGSFRhl          C      0       0      17        0.0%
BITBIGSFRlhhh        9      0       0      18        0.0%
BITBIGSFRlhhlh       8      0       0      19        0.0%
BITBIGSFRlhhllh     12      0       0      20        0.0%
BITBIGSFRlhhllh      3      0       0      21        0.0%
BITBIGSFRlhhlll     26      0       0      22        0.0%
BITBIGSFRlhl         2      0       0      23        0.0%
BITBIGSFRll        240      0       0      24        0.0%
ABS                  0      0       0      25        0.0%
BIGRAM             5FF      0       0      26        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Nov 18 20:10:54 2023

                     l62 7DD8                       l56 7E76                       l80 7EC4  
                     l65 7E02                       l73 7E90                       l59 7DC4  
                     l75 7E9E                       l68 7E1E                       l76 7EB6  
                     u10 7DD2                       u11 7DCE                       u80 7E54  
                     u81 7E50                       u90 7E76                       u91 7E72  
                    l831 7E34                      l823 7E20                      l761 7DC4  
                    l841 7DEA                      l833 7E38                      l825 7E2C  
                    l763 7DD2                      l851 7E12                      l843 7DEE  
                    l835 7E54                      l765 7DD6                      l845 7DF2  
                    l837 7E58                      l861 7EB0                      l853 7E78  
                    l847 7DF6                      l839 7DDC                      l871 7EDA  
                    l863 7EB2                      l855 7E8C                      l849 7DFC  
                    l873 7EE0                      l865 7EB4                      l857 7E8E  
                    l875 7EEA                      l867 7ED2                      l859 7EA4  
                    l877 7EF6                      l869 7ED4                      u100 7E12  
                    u101 7E0E                      u110 7E9E                      u111 7E9A  
                    u120 7EC4                      u121 7EC0                      u130 7ED2  
                    u131 7ECE                      _txd 7DC2                     ?_txd 0001  
                   _RCIF 7CF5                     _TXIF 7CF4                     _main 7E78  
                   txd@a 0001                     start 0000             ___param_bank 0000  
                  ??_txd 0001                    ?_main 0001                    _LATB3 7C53  
                  _RCREG 0FAE                    _RCSTA 0FAB                    _SPBRG 0FAF  
                  _TRISB 0F93                    _TRISC 0F94                    _TXREG 0FAD  
                  _TXSTA 0FAC                    _cantx 7DDA                    _delay 7E20  
                  status 0FD8          __initialization 7DBC             __end_of_main 7F00  
                 ??_main 0008            __activetblptr 0000                   ?_cantx 0002  
                 ?_delay 0001                   _ENDRHI 7B9D                   _MDSEL0 7BBE  
                 _MDSEL1 7BBF                   _TXB0D0 0F46                   _TXB0D1 0F47  
                 cantx@a 0003                   cantx@b 0002                   delay@a 0001  
                 delay@i 0004                   delay@j 0006                   isa$std 0001  
           __mediumconst 0000               __accesstop 0060  __end_of__initialization 7DBC  
          ___rparam_used 0001           __pcstackCOMRAM 0001            __end_of_cantx 7E20  
          __end_of_delay 7E78                  ??_cantx 0003                  ??_delay 0003  
                _BRGCON1 0F70                  _BRGCON2 0F71                  _BRGCON3 0F72  
                _TXB0DLC 0F45                  _TXB0CON 0F40                  __Hparam 0000  
                __Lparam 0000             __psmallconst 1400                  __pcinit 7DBC  
                __ramtop 0600                  __ptext0 7E78                  __ptext1 7E20  
                __ptext2 7DDA                  __ptext3 7DC2     end_of_initialization 7DBC  
    start_initialization 7DBC              __end_of_txd 7DDA              _CANSTATbits 0F6E  
            __smallconst 1400                 _TXB0SIDH 0F41                 _TXB0SIDL 0F42  
             _CANCONbits 0F6F                 __Hrparam 0000                 __Lrparam 0000  
               isa$xinst 0000  
